package org.matheclipse.core.builtin;

import org.matheclipse.core.eval.EvalEngine;
import org.matheclipse.core.eval.interfaces.AbstractEvaluator;
import org.matheclipse.core.expression.BuiltInSymbol;
import org.matheclipse.core.expression.F;
import org.matheclipse.core.expression.S;
import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.interfaces.IBuiltInSymbol;
import org.matheclipse.core.interfaces.IEvaluator;
import org.matheclipse.core.interfaces.IExpr;

public class SourceCodeFunctions {

	final static String GITHUB = "https://github.com/";
	final static String POM_PATH = "axkr/symja_android_library/blob/master/symja_android_library/matheclipse-core/";
	final static String SRC_PATH = "src/main/java/";

	/**
	 * Generated by class: <code>org.matheclipse.core.preprocessor.GithubSymjaFunctionLineNumber</code>
	 */
	public final static int[] LINE_NUMBER_OF_JAVA_CLASS = new int[] { //
			0, 0, 0, 128, 137, 146, 0, 0, 0, 155, //
			0, 0, 168, 178, 0, 0, 0, 0, 0, 0, 0, //
			187, 200, 136, 226, 363, 205, 0, 153, 500, 404, 694, //
			47, 92, 137, 181, 0, 0, 0, 474, 0, 558, 145, //
			31, 44, 0, 101, 133, 719, 380, 0, 562, 647, 177, //
			200, 282, 358, 454, 551, 609, 694, 657, 740, 832, 907, //
			1050, 501, 80, 128, 335, 795, 570, 925, 191, 82, 29, //
			35, 73, 124, 199, 0, 245, 0, 0, 52, 0, 0, //
			0, 0, 0, 0, 1801, 0, 0, 68, 111, 141, 117, //
			1619, 250, 566, 466, 251, 400, 568, 663, 735, 109, 682, //
			244, 875, 80, 76, 32, 347, 1062, 98, 0, 0, 0, //
			0, 272, 326, 299, 225, 0, 793, 879, 918, 0, 971, //
			1060, 0, 0, 1809, 121, 190, 0, 0, 47, 0, 255, //
			0, 454, 95, 0, 161, 533, 0, 489, 64, 1043, 231, //
			538, 247, 1232, 170, 0, 1188, 0, 624, 0, 1459, 1528, //
			322, 200, 1211, 580, 672, 644, 0, 1131, 381, 414, 117, //
			752, 144, 248, 268, 893, 0, 0, 0, 0, 1307, 0, //
			26, 497, 1399, 950, 63, 277, 1816, 0, 0, 1518, 1010, //
			1468, 368, 430, 1018, 1075, 727, 0, 0, 1569, 117, 49, //
			103, 165, 141, 473, 477, 876, 1823, 791, 23, 1037, 1372, //
			1172, 68, 1598, 165, 240, 1705, 1337, 1671, 1746, 283, 2788, //
			19, 771, 1442, 1861, 1069, 52, 0, 439, 165, 52, 16, //
			78, 127, 1218, 541, 0, 538, 621, 327, 0, 0, 1769, //
			1914, 2021, 2062, 1128, 1841, 1832, 309, 82, 844, 915, 940, //
			1020, 0, 0, 0, 241, 1265, 0, 265, 301, 1112, 1122, //
			0, 1410, 0, 0, 385, 0, 1181, 2900, 536, 31, 2115, //
			0, 0, 1232, 0, 105, 1352, 1393, 1271, 1447, 1378, 1357, //
			654, 1212, 2224, 2144, 0, 381, 13, 51, 88, 0, 747, //
			802, 0, 57, 1416, 1517, 78, 93, 55, 0, 75, 218, //
			333, 428, 555, 210, 0, 0, 257, 0, 1168, 1402, 438, //
			511, 581, 3068, 279, 1534, 410, 1644, 842, 670, 349, 0, //
			0, 1471, 1962, 260, 324, 22, 1362, 1873, 3206, 714, 3288, //
			36, 33, 0, 1733, 0, 2354, 1503, 1929, 2203, 2176, 2229, //
			2322, 1922, 2087, 1966, 0, 2273, 296, 0, 964, 92, 0, //
			1029, 0, 0, 36, 156, 1149, 480, 635, 1093, 2495, 299, //
			0, 1456, 775, 901, 0, 0, 481, 557, 0, 546, 2533, //
			2575, 1013, 1522, 14, 1611, 655, 1678, 413, 427, 497, 2405, //
			53, 72, 2448, 726, 1674, 0, 141, 1387, 606, 63, 151, //
			139, 1752, 1556, 1835, 632, 2669, 2751, 0, 0, 0, 567, //
			0, 29, 69, 0, 2113, 2071, 692, 447, 467, 525, 2202, //
			125, 0, 217, 61, 267, 314, 384, 425, 0, 0, 0, //
			0, 1605, 1988, 0, 1713, 2806, 2365, 901, 0, 775, 821, //
			0, 2531, 1834, 1980, 725, 0, 15, 1830, 505, 0, 1749, //
			1848, 893, 0, 0, 0, 0, 264, 973, 0, 21, 315, //
			0, 790, 681, 739, 0, 845, 2586, 987, 770, 1044, 585, //
			1049, 1802, 1128, 0, 2049, 2080, 0, 2202, 0, 2129, 0, //
			648, 0, 1067, 1856, 0, 0, 354, 0, 2941, 0, 369, //
			447, 860, 373, 918, 297, 0, 0, 76, 14, 46, 15, //
			1186, 37, 2860, 77, 230, 132, 334, 1998, 1011, 225, 900, //
			956, 19, 30, 1071, 2004, 39, 1050, 0, 574, 0, 607, //
			675, 0, 722, 0, 762, 2052, 0, 0, 0, 0, 802, //
			2513, 842, 526, 3037, 658, 769, 0, 314, 398, 531, 352, //
			712, 890, 0, 3491, 2556, 3593, 2234, 2525, 1870, 36, 3119, //
			743, 2116, 0, 1979, 2028, 3194, 2281, 2366, 0, 421, 160, //
			3310, 3388, 0, 0, 0, 0, 0, 0, 0, 0, 0, //
			0, 0, 0, 71, 0, 330, 71, 2607, 2229, 2717, 0, //
			0, 176, 223, 33, 33, 32, 0, 0, 1007, 2030, 2181, //
			2203, 1110, 1138, 3638, 2427, 2149, 0, 452, 198, 2463, 2767, //
			0, 0, 2893, 459, 1884, 2275, 942, 991, 1008, 1077, 1188, //
			548, 977, 622, 2571, 0, 2612, 1856, 2682, 614, 2788, 2523, //
			69, 0, 0, 328, 3859, 3894, 75, 4003, 81, 1183, 699, //
			2951, 2999, 0, 131, 1146, 0, 0, 2659, 28, 2768, 0, //
			382, 2337, 0, 0, 1003, 1279, 0, 3062, 2072, 0, 3441, //
			3125, 3210, 2395, 57, 29, 19, 0, 0, 0, 71, 451, //
			539, 1103, 24, 4155, 190, 2828, 3459, 2904, 0, 0, 0, //
			1326, 1385, 1471, 1531, 3279, 10, 3054, 3108, 0, 2984, 0, //
			3159, 2904, 943, 4382, 3002, 3229, 0, 0, 167, 0, 0, //
			661, 0, 3074, 0, 0, 0, 0, 2485, 0, 0, 0, //
			0, 775, 1626, 1745, 0, 1432, 58, 1303, 1203, 1257, 1460, //
			3303, 0, 1293, 1339, 323, 0, 835, 3124, 19, 77, 0, //
			0, 4708, 0, 3576, 3804, 16, 1983, 1028, 3346, 3496, 0, //
			1485, 1493, 0, 0, 3639, 3669, 1083, 749, 1865, 2513, 2631, //
			0, 32, 27, 0, 0, 2771, 3012, 0, 4770, 16, 1368, //
			1412, 0, 2604, 2752, 2927, 3083, 3153, 3240, 3393, 4009, 3428, //
			931, 0, 3222, 3488, 1109, 4303, 4347, 4258, 0, 0, 4217, //
			4329, 3736, 3857, 3770, 3928, 1056, 0, 3950, 4006, 209, 4586, //
			93, 1489, 3189, 244, 0, 3299, 0, 1547, 3348, 4904, 236, //
			0, 299, 816, 5046, 2124, 1534, 1174, 1298, 20, 12, 59, //
			92, 170, 255, 306, 449, 5077, 4417, 4394, 4059, 0, 4481, //
			0, 0, 0, 1137, 0, 2165, 0, 0, 0, 221, 0, //
			0, 1602, 0, 4538, 4765, 4826, 4970, 5076, 5195, 5156, 888, //
			2275, 5195, 3401, 5241, 0, 1389, 158, 3889, 1279, 0, 1380, //
			5335, 5408, 146, 1419, 0, 3482, 1657, 1701, 1449, 3496, 0, //
			3538, 3623, 3700, 0, 1592, 2230, 2381, 0, 5484, 5527, 0, //
			0, 0, 0, 1083, 1425, 1701, 1832, 323, 1967, 32, 165, //
			0, 4609, 4755, 1504, 133, 2487, 1246, 2657, 3576, 2760, 1356, //
			5265, 0, 0, 1537, 80, 1680, 1760, 2325, 0, 66, 892, //
			978, 0, 0, 5626, 5695, 4820, 4211, 1190, 493, 2375, 2423, //
			5356, 0, 5389, 0, 0, 1620, 4348, 4454, 0, 0, 233, //
			330, 378, 415, 436, 471, 492, 538, 0, 576, 643, 721, //
			778, 0, 514, 1651, 1731, 5418, 0, 178, 5755, 4534, 0, //
			43, 1600, 0, 5049, 5004, 138, 594, 0, 4861, 0, 5578, //
			2496, 1843, 1877, 0, 0, 1227, 815, 1302, 0, 5874, 201, //
			0, 2131, 2205, 6233, 6418, 6464, 6074, 2883, 3026, 3826, 15, //
			661, 407, 539, 573, 428, 0, 838, 1933, 2031, 2700, 2527, //
			177, 107, 5163, 6131, 2682, 869, 909, 3683, 3633, 955, 971, //
			674, 3611, 3942, 0, 0, 6556, 3767, 2755, 2790, 0, 3860, //
			683, 0, 45, 51, 32, 0, 3941, 0, 1777, 0, 0, //
			0, 0, 4030, 2870, 5661, 6649, 2293, 360, 1548, 4032, 0, //
			4615, 0, 268, 4090, 2378, 2445, 2518, 1040, 4081, 1335, 611, //
			4137, 0, 4296, 5882, 4201, 1385, 1199, 1264, 1326, 0, 5977, //
			954, 988, 1022, 1066, 0, 0, 2932, 3000, 0, 0, 0, //
			1434, 1496, 3054, 0, 0, 0, 4162, 0, 1888, 0, 1811 };

	/**
	 * 
	 * See <a href="https://pangin.pro/posts/computation-in-static-initializer">Beware of computation in static
	 * initializer</a>
	 */
	private static class Initializer {

		private static void init() {
			S.FunctionURL.setEvaluator(new FunctionURL());
		}
	}

	private static class FunctionURL extends AbstractEvaluator {

		@Override
		public IExpr evaluate(final IAST ast, EvalEngine engine) {
			if (ast.arg1().isBuiltInSymbol()) {
				IBuiltInSymbol builtin = (IBuiltInSymbol) ast.arg1();
				String url = functionURL(builtin);
				if (url != null) {
					return F.stringx(url);
				}
			}
			return F.NIL;
		}

		@Override
		public int[] expectedArgSize(IAST ast) {
			return IOFunctions.ARGS_1_1;
		}
	}

	private static String buildURL(final Class<?> clazz, int line) {
		StringBuilder buf = new StringBuilder(512);
		buf.append(GITHUB);
		buf.append(POM_PATH);
		buf.append(SRC_PATH);
		String canonicalName = clazz.getCanonicalName();
		String packageName = clazz.getPackage().getName();
		String parentClass = canonicalName.substring(packageName.length() + 1);
		int index = parentClass.indexOf('.');
		if (index > 0) {
			parentClass = parentClass.substring(0, index);
		}
		String packagePath = packageName.replace('.', '/');
		buf.append(packagePath);
		buf.append('/');
		buf.append(parentClass);
		buf.append(".java#L");
		buf.append(line);
		return buf.toString();
	}

	public static String functionURL(IBuiltInSymbol builtin) {
		int ordinal = builtin.ordinal();
		if (ordinal > 0 && ordinal < LINE_NUMBER_OF_JAVA_CLASS.length) {
			int line = LINE_NUMBER_OF_JAVA_CLASS[ordinal];
			if (line > 0) {
				IEvaluator evaluator = builtin.getEvaluator();
				if (evaluator != null && evaluator != BuiltInSymbol.DUMMY_EVALUATOR) {
					Class<? extends IEvaluator> clazz = evaluator.getClass();
					return buildURL(clazz, line);
				}
			}
		}
		return null;
	}

	public static void initialize() {
		Initializer.init();
	}

	private SourceCodeFunctions() {

	}

}
