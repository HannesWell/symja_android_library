package org.matheclipse.core.builtin;

import org.matheclipse.core.eval.EvalEngine;
import org.matheclipse.core.eval.interfaces.AbstractEvaluator;
import org.matheclipse.core.expression.BuiltInSymbol;
import org.matheclipse.core.expression.F;
import org.matheclipse.core.expression.S;
import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.interfaces.IBuiltInSymbol;
import org.matheclipse.core.interfaces.IEvaluator;
import org.matheclipse.core.interfaces.IExpr;

public class SourceCodeFunctions {

	final static String GITHUB = "https://github.com/";
	final static String POM_PATH = "axkr/symja_android_library/blob/master/symja_android_library/matheclipse-core/";
	final static String SRC_PATH = "src/main/java/";

	/**
	 * Generated by class: <code>org.matheclipse.core.preprocessor.GithubSymjaFunctionLineNumber</code>
	 */
	public final static int[] LINE_NUMBER_OF_JAVA_CLASS = new int[] { //
			0, 0, 0, 136, 145, 154, 0, 0, 0, 163, //
			0, 0, 176, 186, 0, 0, 0, 0, 195, 208, 0, //
			0, 0, 217, 231, 244, 257, 138, 226, 363, 205, 0, //
			155, 502, 404, 694, 47, 92, 137, 181, 0, 0, 0, //
			474, 0, 558, 145, 31, 44, 0, 101, 133, 719, 380, //
			0, 564, 649, 179, 200, 282, 358, 454, 551, 609, 694, //
			657, 740, 832, 907, 1050, 501, 80, 128, 335, 797, 570, //
			927, 191, 82, 31, 35, 73, 124, 201, 0, 247, 0, //
			0, 52, 0, 0, 0, 0, 0, 0, 1801, 0, 0, //
			68, 60, 90, 0, 117, 1619, 250, 566, 466, 251, 400, //
			568, 663, 735, 109, 682, 244, 875, 80, 76, 32, 347, //
			1062, 98, 0, 0, 0, 0, 97, 151, 124, 232, 0, //
			793, 879, 918, 0, 971, 1060, 0, 0, 1809, 121, 197, //
			0, 0, 47, 0, 257, 0, 454, 95, 0, 161, 533, //
			0, 489, 64, 1045, 288, 538, 254, 1234, 170, 0, 1188, //
			0, 114, 624, 88, 1459, 1528, 329, 200, 1211, 580, 672, //
			644, 0, 1131, 206, 239, 121, 752, 144, 248, 268, 893, //
			0, 0, 0, 0, 1309, 0, 26, 504, 1401, 950, 63, //
			334, 1816, 0, 0, 1520, 1010, 1470, 375, 437, 1018, 1075, //
			727, 0, 0, 1571, 117, 49, 103, 165, 141, 298, 484, //
			876, 1823, 791, 23, 1037, 1372, 1172, 68, 1598, 165, 242, //
			1705, 1337, 1673, 1748, 285, 2788, 19, 771, 1442, 1861, 1069, //
			52, 0, 439, 166, 52, 16, 78, 127, 1218, 366, 0, //
			545, 450, 384, 0, 0, 1771, 1916, 2023, 2064, 1128, 1841, //
			1832, 311, 82, 844, 915, 940, 1020, 0, 0, 0, 241, //
			1265, 0, 265, 301, 1112, 1122, 0, 1410, 0, 0, 385, //
			0, 1181, 2900, 536, 31, 2117, 0, 0, 1232, 0, 105, //
			1352, 1393, 1271, 1447, 1378, 1357, 661, 1212, 486, 2226, 2146, //
			0, 438, 13, 51, 88, 0, 747, 802, 0, 57, 1417, //
			1518, 78, 93, 55, 0, 75, 218, 333, 428, 555, 159, //
			0, 0, 206, 0, 0, 1168, 1402, 438, 511, 581, 3068, //
			281, 1534, 467, 1642, 842, 527, 349, 0, 0, 1471, 0, //
			1962, 260, 324, 22, 1362, 1873, 3206, 714, 3288, 36, 33, //
			0, 1731, 0, 2356, 1503, 1929, 2282, 2176, 2229, 2322, 1920, //
			2166, 1964, 0, 2352, 545, 300, 0, 964, 92, 0, 1029, //
			0, 0, 36, 156, 1149, 480, 635, 1093, 2497, 299, 0, //
			1456, 782, 908, 0, 0, 483, 568, 0, 546, 2535, 2577, //
			1020, 1522, 14, 1612, 655, 1678, 413, 427, 497, 2486, 53, //
			170, 2529, 726, 1675, 0, 141, 1388, 617, 63, 151, 142, //
			1752, 1556, 1835, 632, 2671, 2753, 0, 0, 0, 567, 0, //
			29, 69, 0, 2113, 2071, 225, 504, 524, 582, 2202, 125, //
			0, 217, 61, 267, 314, 384, 425, 0, 0, 0, 0, //
			1605, 1988, 0, 1713, 2808, 2365, 901, 0, 775, 821, 0, //
			2531, 1834, 1980, 736, 0, 15, 1830, 505, 0, 1750, 1848, //
			604, 0, 0, 0, 0, 265, 684, 0, 21, 316, 0, //
			790, 681, 739, 0, 845, 2586, 987, 770, 1044, 642, 760, //
			1803, 1135, 0, 2049, 2080, 0, 2202, 0, 2129, 0, 705, //
			0, 778, 1857, 0, 0, 355, 0, 2943, 0, 369, 447, //
			860, 374, 918, 297, 0, 0, 76, 14, 46, 15, 1193, //
			37, 2862, 77, 230, 132, 334, 1999, 1011, 225, 900, 956, //
			19, 30, 1071, 2004, 39, 1050, 0, 575, 0, 607, 675, //
			0, 722, 0, 762, 2053, 0, 0, 0, 0, 802, 2594, //
			842, 527, 3039, 658, 769, 0, 316, 400, 549, 354, 769, //
			890, 0, 3491, 2637, 3593, 2234, 2526, 1870, 36, 3182, 754, //
			2117, 0, 1979, 2028, 3257, 2281, 2366, 0, 423, 258, 3373, //
			3451, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //
			0, 0, 71, 0, 330, 71, 2688, 2230, 2798, 0, 0, //
			176, 223, 33, 33, 32, 0, 0, 718, 2030, 2181, 2203, //
			1110, 1138, 3638, 2427, 2149, 0, 0, 454, 296, 2464, 2848, //
			0, 0, 2974, 463, 1884, 2275, 953, 1002, 1019, 1088, 1199, //
			548, 977, 623, 2572, 0, 2613, 1856, 2683, 614, 2789, 2523, //
			69, 0, 0, 328, 3859, 3894, 75, 4003, 81, 1183, 699, //
			3032, 3080, 0, 131, 857, 0, 0, 2659, 28, 2768, 0, //
			382, 2337, 0, 0, 1003, 1281, 0, 3143, 2072, 0, 3504, //
			3206, 3291, 2395, 57, 29, 19, 0, 0, 0, 71, 451, //
			539, 1103, 24, 4155, 190, 2828, 3522, 2904, 0, 0, 0, //
			1328, 1387, 1473, 1533, 3360, 10, 3054, 3108, 0, 2984, 0, //
			3159, 2905, 943, 4382, 3046, 3229, 0, 0, 167, 0, 0, //
			718, 0, 3118, 0, 0, 0, 0, 2485, 0, 0, 0, //
			0, 775, 1628, 1747, 0, 1443, 58, 1014, 914, 968, 1199, //
			3303, 0, 1304, 1350, 323, 0, 835, 3168, 19, 77, 0, //
			0, 1171, 4708, 0, 3639, 3867, 16, 1985, 1028, 3427, 3577, //
			0, 1226, 1504, 0, 2122, 0, 3720, 3750, 1083, 806, 1865, //
			2513, 2631, 0, 32, 27, 0, 0, 2771, 3012, 0, 4770, //
			16, 1368, 1412, 0, 2604, 2752, 2927, 3083, 3153, 3240, 3393, //
			4072, 3428, 931, 0, 3222, 3488, 1109, 4299, 4343, 4254, 0, //
			0, 4280, 4392, 3817, 3938, 3851, 4009, 1056, 0, 4031, 4087, //
			209, 331, 4586, 93, 1489, 3233, 248, 0, 3343, 0, 351, //
			3392, 4904, 236, 0, 299, 816, 5050, 2155, 0, 1174, 1298, //
			20, 12, 62, 95, 177, 278, 335, 482, 5081, 4480, 4390, //
			4140, 0, 4477, 0, 402, 0, 0, 1137, 0, 2196, 0, //
			0, 0, 221, 0, 0, 362, 1294, 1321, 4601, 4828, 4889, //
			5033, 5139, 5199, 5219, 888, 2306, 5258, 3445, 5304, 0, 1389, //
			159, 3889, 1279, 0, 1380, 5398, 5471, 146, 1419, 0, 3526, //
			1369, 1413, 1449, 3496, 0, 3538, 3623, 3700, 0, 1626, 2230, //
			2381, 0, 5547, 5590, 0, 0, 0, 0, 1083, 1425, 1701, //
			1544, 327, 1679, 32, 165, 0, 0, 4605, 4751, 1504, 133, //
			2487, 1246, 2657, 3620, 2760, 1356, 5269, 0, 0, 1537, 80, //
			1714, 1794, 2356, 0, 68, 892, 978, 0, 0, 5689, 5758, //
			4816, 4292, 1190, 499, 2406, 2454, 5360, 0, 5393, 0, 0, //
			1620, 4429, 4535, 0, 0, 387, 510, 449, 558, 595, 0, //
			616, 651, 672, 718, 0, 756, 822, 900, 950, 1043, 532, //
			1651, 1731, 5422, 0, 178, 5818, 4615, 0, 43, 1600, 0, //
			5045, 5000, 138, 612, 0, 4857, 0, 5582, 2527, 1877, 1911, //
			0, 0, 1227, 1082, 1302, 0, 5937, 202, 0, 1843, 1916, //
			6303, 6488, 6534, 6144, 2883, 3026, 3826, 15, 662, 407, 539, //
			573, 428, 0, 49, 0, 0, 0, 1105, 1967, 2065, 2737, //
			2558, 177, 116, 5159, 6127, 2713, 1136, 1176, 3727, 3633, 1222, //
			1238, 731, 3655, 3942, 0, 0, 6626, 3811, 2792, 2827, 0, //
			1287, 3904, 684, 0, 45, 51, 32, 0, 3941, 0, 1777, //
			0, 0, 0, 0, 4030, 2907, 5665, 6732, 2004, 360, 1548, //
			4076, 0, 4696, 0, 272, 4090, 2089, 2175, 2253, 0, 2313, //
			1380, 4125, 1335, 629, 4181, 0, 4296, 5886, 4245, 1385, 187, //
			1199, 1264, 1326, 0, 5981, 954, 988, 1022, 1066, 0, 0, //
			2969, 3037, 0, 0, 0, 1434, 1496, 3091, 0, 0, 452, //
			4162, 0, 1888, 0, 1811 };

	/**
	 * 
	 * See <a href="https://pangin.pro/posts/computation-in-static-initializer">Beware of computation in static
	 * initializer</a>
	 */
	private static class Initializer {

		private static void init() {
			S.FunctionURL.setEvaluator(new FunctionURL());
		}
	}

	private static class FunctionURL extends AbstractEvaluator {

		@Override
		public IExpr evaluate(final IAST ast, EvalEngine engine) {
			if (ast.arg1().isBuiltInSymbol()) {
				IBuiltInSymbol builtin = (IBuiltInSymbol) ast.arg1();
				String url = functionURL(builtin);
				if (url != null) {
					return F.stringx(url);
				}
			}
			return F.NIL;
		}

		@Override
		public int[] expectedArgSize(IAST ast) {
			return IOFunctions.ARGS_1_1;
		}
	}

	private static String buildURL(final Class<?> clazz, int line) {
		StringBuilder buf = new StringBuilder(512);
		buf.append(GITHUB);
		buf.append(POM_PATH);
		buf.append(SRC_PATH);
		String canonicalName = clazz.getCanonicalName();
		String packageName = clazz.getPackage().getName();
		String parentClass = canonicalName.substring(packageName.length() + 1);
		int index = parentClass.indexOf('.');
		if (index > 0) {
			parentClass = parentClass.substring(0, index);
		}
		String packagePath = packageName.replace('.', '/');
		buf.append(packagePath);
		buf.append('/');
		buf.append(parentClass);
		buf.append(".java#L");
		buf.append(line);
		return buf.toString();
	}

	public static String functionURL(IBuiltInSymbol builtin) {
		int ordinal = builtin.ordinal();
		if (ordinal > 0 && ordinal < LINE_NUMBER_OF_JAVA_CLASS.length) {
			int line = LINE_NUMBER_OF_JAVA_CLASS[ordinal];
			if (line > 0) {
				IEvaluator evaluator = builtin.getEvaluator();
				if (evaluator != null && evaluator != BuiltInSymbol.DUMMY_EVALUATOR) {
					Class<? extends IEvaluator> clazz = evaluator.getClass();
					return buildURL(clazz, line);
				}
			}
		}
		return null;
	}

	public static void initialize() {
		Initializer.init();
	}

	private SourceCodeFunctions() {

	}

}
