package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.ISymbol;
import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.patternmatching.Matcher;

/**
 * <p>Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.</p>
 * <p>See GIT repository at: <a href="https://github.com/axkr/symja_android_library">github.com/axkr/symja_android_library under the tools directory</a>.</p>
 */
public interface BesselIRules {
  /**
   * <ul>
   * <li>index 0 - number of equal rules in <code>RULES</code></li>
	 * </ul>
	 */
  final public static int[] SIZES = { 2, 3 };

  final public static IAST RULES = List(
    IInit(BesselI, SIZES),
    // BesselI(Undefined,y_):=Undefined
    ISetDelayed(BesselI(Undefined,y_),
      Undefined),
    // BesselI(x_,Undefined):=Undefined
    ISetDelayed(BesselI(x_,Undefined),
      Undefined),
    // BesselI(-1/2,z_):=(Sqrt(2/Pi)*Cosh(z))/Sqrt(z)
    ISetDelayed(BesselI(CN1D2,z_),
      Times(Sqrt(Times(C2,Power(Pi,CN1))),Power(z,CN1D2),Cosh(z))),
    // BesselI(1/2,z_):=(Sqrt(2/Pi)*Sinh(z))/Sqrt(z)
    ISetDelayed(BesselI(C1D2,z_),
      Times(Sqrt(Times(C2,Power(Pi,CN1))),Power(z,CN1D2),Sinh(z))),
    // BesselI(x_/;x>0&&IntegerQ(2*x),z_/;z!=0&&FreeQ(z,DirectedInfinity)):=Module({u,f,k=-1/2+x},f=Sinh(u)/u;While(k>0,k=-1+k;f=-D(f,u)/u);Sqrt(2/Pi*z)*f/(-u)^(1/2-x)/.u->z)
    ISetDelayed(BesselI(Condition(x_,And(Greater(x,C0),IntegerQ(Times(C2,x)))),Condition(z_,And(Unequal(z,C0),FreeQ(z,DirectedInfinity)))),
      Module(list(u,f,Set(k,Plus(CN1D2,x))),CompoundExpression(Set(f,Times(Power(u,CN1),Sinh(u))),While(Greater(k,C0),CompoundExpression(Set(k,Plus(CN1,k)),Set(f,Times(CN1,Power(u,CN1),D(f,u))))),ReplaceAll(Times(Sqrt(Times(C2,Power(Pi,CN1),z)),Power(Negate(u),Plus(CN1D2,x)),f),Rule(u,z))))),
    // BesselI(x_/;x<0&&IntegerQ(2*x),z_/;z!=0&&FreeQ(z,DirectedInfinity)):=Module({u,f,k=-1/2-x},f=Cosh(u)/u;While(k>0,k=-1+k;f=-D(f,u)/u);Sqrt(2/Pi*z)*f/(-u)^(1/2+x)/.u->z)
    ISetDelayed(BesselI(Condition(x_,And(Less(x,C0),IntegerQ(Times(C2,x)))),Condition(z_,And(Unequal(z,C0),FreeQ(z,DirectedInfinity)))),
      Module(list(u,f,Set(k,Subtract(CN1D2,x))),CompoundExpression(Set(f,Times(Power(u,CN1),Cosh(u))),While(Greater(k,C0),CompoundExpression(Set(k,Plus(CN1,k)),Set(f,Times(CN1,Power(u,CN1),D(f,u))))),ReplaceAll(Times(Sqrt(Times(C2,Power(Pi,CN1),z)),Power(Negate(u),Subtract(CN1D2,x)),f),Rule(u,z))))),
    // BesselI(x_,-I*Infinity)=0
    ISet(BesselI(x_,DirectedInfinity(CNI)),
      C0),
    // BesselI(x_,I*Infinity)=0
    ISet(BesselI(x_,DirectedInfinity(CI)),
      C0)
  );
}
