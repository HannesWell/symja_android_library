package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.ISymbol;
import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.patternmatching.Matcher;

/**
 * <p>Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.</p>
 * <p>See GIT repository at: <a href="https://github.com/axkr/symja_android_library">github.com/axkr/symja_android_library under the tools directory</a>.</p>
 */
public interface BesselJRules {
  /**
   * <ul>
   * <li>index 0 - number of equal rules in <code>RULES</code></li>
	 * </ul>
	 */
  final public static int[] SIZES = { 2, 3 };

  final public static IAST RULES = List(
    IInit(BesselJ, SIZES),
    // BesselJ(Undefined,y_):=Undefined
    ISetDelayed(BesselJ(Undefined,y_),
      Undefined),
    // BesselJ(x_,Undefined):=Undefined
    ISetDelayed(BesselJ(x_,Undefined),
      Undefined),
    // BesselJ(-1/2,z_):=(Sqrt(2/Pi)*Cos(z))/Sqrt(z)
    ISetDelayed(BesselJ(CN1D2,z_),
      Times(Sqrt(Times(C2,Power(Pi,CN1))),Power(z,CN1D2),Cos(z))),
    // BesselJ(1/2,z_):=(Sqrt(2/Pi)*Sin(z))/Sqrt(z)
    ISetDelayed(BesselJ(C1D2,z_),
      Times(Sqrt(Times(C2,Power(Pi,CN1))),Power(z,CN1D2),Sin(z))),
    // BesselJ(x_,-Infinity)=0
    ISet(BesselJ(x_,Noo),
      C0),
    // BesselJ(x_,Infinity)=0
    ISet(BesselJ(x_,oo),
      C0)
  );
}
