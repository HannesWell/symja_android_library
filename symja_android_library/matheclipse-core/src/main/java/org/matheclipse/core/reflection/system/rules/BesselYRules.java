package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.ISymbol;
import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.patternmatching.Matcher;

/**
 * <p>Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.</p>
 * <p>See GIT repository at: <a href="https://github.com/axkr/symja_android_library">github.com/axkr/symja_android_library under the tools directory</a>.</p>
 */
public interface BesselYRules {
  /**
   * <ul>
   * <li>index 0 - number of equal rules in <code>RULES</code></li>
	 * </ul>
	 */
  final public static int[] SIZES = { 0, 7 };

  final public static IAST RULES = List(
    IInit(BesselY, SIZES),
    // BesselY(Undefined,y_):=Undefined
    ISetDelayed(BesselY(Undefined,y_),
      Undefined),
    // BesselY(x_,Undefined):=Undefined
    ISetDelayed(BesselY(x_,Undefined),
      Undefined),
    // BesselY(-1/2,z_):=(Sqrt(2/Pi)*Sin(z))/Sqrt(z)
    ISetDelayed(BesselY(CN1D2,z_),
      Times(Sqrt(Times(C2,Power(Pi,CN1))),Power(z,CN1D2),Sin(z))),
    // BesselY(1/2,z_):=(-Sqrt(2/Pi)*Cos(z))/Sqrt(z)
    ISetDelayed(BesselY(C1D2,z_),
      Times(CN1,Sqrt(Times(C2,Power(Pi,CN1))),Power(z,CN1D2),Cos(z))),
    // BesselY(-3/2,z_):=(Sqrt(2/Pi)*(Cos(z)-Sin(z)/z))/Sqrt(z)
    ISetDelayed(BesselY(QQ(-3L,2L),z_),
      Times(Sqrt(Times(C2,Power(Pi,CN1))),Power(z,CN1D2),Plus(Cos(z),Times(CN1,Power(z,CN1),Sin(z))))),
    // BesselY(3/2,z_):=(Sqrt(2/Pi)*(-Cos(z)/z-Sin(z)))/Sqrt(z)
    ISetDelayed(BesselY(QQ(3L,2L),z_),
      Times(Sqrt(Times(C2,Power(Pi,CN1))),Power(z,CN1D2),Subtract(Times(CN1,Power(z,CN1),Cos(z)),Sin(z)))),
    // BesselY(-5/2,z_):=(Sqrt(2/Pi)*(((-1)*3*Cos(z))/z-Sin(z)+(3*Sin(z))/z^2))/Sqrt(z)
    ISetDelayed(BesselY(QQ(-5L,2L),z_),
      Times(Sqrt(Times(C2,Power(Pi,CN1))),Power(z,CN1D2),Plus(Times(CN1,C3,Power(z,CN1),Cos(z)),Negate(Sin(z)),Times(C3,Power(z,CN2),Sin(z))))),
    // BesselY(5/2,z_):=(Sqrt(2/Pi)*(Cos(z)+(-3*Cos(z))/z^2+(-3*Sin(z))/z))/Sqrt(z)
    ISetDelayed(BesselY(QQ(5L,2L),z_),
      Times(Sqrt(Times(C2,Power(Pi,CN1))),Power(z,CN1D2),Plus(Cos(z),Times(CN3,Power(z,CN2),Cos(z)),Times(CN3,Power(z,CN1),Sin(z))))),
    // BesselY(x_/;x>0&&FractionalPart(x)==0.5&&!IntegerQ(x),z_/;!PossibleZeroQ(z)&&FreeQ(z,DirectedInfinity)):=Module({u,f,k=-1/2+x},f=Cos(u)/u;While(k>0,k=-1+k;f=D(f,u)/u);-Sqrt(2/Pi*z)*f/(-u)^(1/2-x)/.u->z)
    ISetDelayed(BesselY(Condition(x_,And(Greater(x,C0),Equal(FractionalPart(x),num(0.5)),Not(IntegerQ(x)))),Condition(z_,And(Not(PossibleZeroQ(z)),FreeQ(z,DirectedInfinity)))),
      Module(list(u,f,Set(k,Plus(CN1D2,x))),CompoundExpression(Set(f,Times(Power(u,CN1),Cos(u))),While(Greater(k,C0),CompoundExpression(Set(k,Plus(CN1,k)),Set(f,Times(Power(u,CN1),D(f,u))))),ReplaceAll(Times(CN1,Sqrt(Times(C2,Power(Pi,CN1),z)),Power(Negate(u),Plus(CN1D2,x)),f),Rule(u,z))))),
    // BesselY(x_/;x<0&&FractionalPart(x)==-0.5&&!IntegerQ(x),z_/;!PossibleZeroQ(z)&&FreeQ(z,DirectedInfinity)):=Module({u,f,k=-1/2-x},f=Sin(u)/u;While(k>0,k=-1+k;f=D(f,u)/u);Sqrt(2/Pi*z)*f/(-u)^(1/2+x)/.u->z)
    ISetDelayed(BesselY(Condition(x_,And(Less(x,C0),Equal(FractionalPart(x),num(-0.5)),Not(IntegerQ(x)))),Condition(z_,And(Not(PossibleZeroQ(z)),FreeQ(z,DirectedInfinity)))),
      Module(list(u,f,Set(k,Subtract(CN1D2,x))),CompoundExpression(Set(f,Times(Power(u,CN1),Sin(u))),While(Greater(k,C0),CompoundExpression(Set(k,Plus(CN1,k)),Set(f,Times(Power(u,CN1),D(f,u))))),ReplaceAll(Times(Sqrt(Times(C2,Power(Pi,CN1),z)),Power(Negate(u),Subtract(CN1D2,x)),f),Rule(u,z)))))
  );
}
