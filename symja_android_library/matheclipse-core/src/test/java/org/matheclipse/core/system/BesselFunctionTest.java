package org.matheclipse.core.system;

import org.junit.Test;

public class BesselFunctionTest extends ExprEvaluatorTestCase {


  @Test
  public void testAiryAi() {
    checkNumeric("N(AiryAi(2),50)", //
        "0.034924130423274379135322080791807609761060213897584");
    checkNumeric("N(AiryAi(7/3-2/5*I),50)", //
        "0.016874804605341661659775534626271816427074044995773+I*0.012798024737488814075510100061236077085813173622613");
    checkNumeric("AiryAi(0.0)", //
        "0.35502805388781723");
    checkNumeric("AiryAi(1.8)", //
        "0.04703621686684581");
    checkNumeric("AiryAi(2.0)", //
        "0.03492413042327437");
    checkNumeric("AiryAi(2.5+I)", //
        "-0.00191208927137838+I*(-0.01803290576534917)");
    checkNumeric("AiryAi({1.2, 1.5, 1.8})", //
        "{0.10612576226331255,0.07174949700810542,0.04703621686684581}");

    checkNumeric("AiryAi(-2.0-2.0*I)", //
        "3.4208376424760294+I*(-2.390652519773028)");

    checkNumeric("Table(AiryAi(x+I*y), {x,-2,2,0.5}, {y,-2 ,2,0.5})", //
        "{{3.4208376424760294+I*(-2.390652519773028),1.3358308195081794+I*(-1.4955254358275654),0.5563045393711925+I*(-0.7898014381882759)," //
            + "0.290030941062661+I*(-0.3303078762239586),0.22740742820168555,0.290030941062661+I*0.3303078762239586,0.5563045393711925+I*0.7898014381882759," //
            + "1.3358308195081794+I*1.4955254358275654,3.4208376424760294+I*2.390652519773028},{3.097441721400677+I*0.2760069240069372," //
            + "1.630504352621882+I*(-0.2888797473203903),0.8849522834391784+I*(-0.28932577386387387),0.5556884983907999+I*(-0.15402139368443876)," //
            + "0.46425657774886936,0.5556884983907999+I*0.15402139368443876,0.8849522834391784+I*0.28932577386387387,1.630504352621882+I*0.2888797473203903," //
            + "3.097441721400677+I*(-0.2760069240069372)},{1.6950640897970375+I*1.4241845593465408,1.2102764053596837+I*0.4733886603613785," //
            + "0.8221174265552725+I*0.11996634266442434,0.6038101468250492+I*0.01701729306256589,0.5355608832923521,0.6038101468250492+I*(-0.01701729306256589)," //
            + "0.8221174265552725+I*(-0.11996634266442434),1.2102764053596837+I*(-0.4733886603613785),1.6950640897970375+I*(-1.4241845593465408)}," //
            + "{0.49718792123513506+I*1.3932056575076226,0.6389761019209798+I*0.6893216583744993,0.5790199658388449+I*0.3084924553867702," //
            + "0.504653898335663+I*0.11433718873992552,0.4757280916105395,0.504653898335663+I*(-0.11433718873992552)," //
            + "0.5790199658388449+I*(-0.3084924553867702),0.6389761019209798+I*(-0.6893216583744993),0.49718792123513506+I*(-1.3932056575076226)}," //
            + "{-0.10961462643277392+I*0.9115836001138607,0.2237278511097556+I*0.5781126623007086,0.3314933054321412+I*0.31744985896844374," //
            + "0.3536492233751019+I*0.13680205422852426,0.3550280538878172,0.3536492233751019+I*(-0.13680205422852426)," //
            + "0.3314933054321412+I*(-0.31744985896844374),0.2237278511097556+I*(-0.5781126623007086),-0.10961462643277392+I*(-0.9115836001138607)}," //
            + "{-0.26626152971283157+I*0.45548648549281234,0.0160995085282936+I*0.3726593373594341,0.1571184464999862+I*0.24103981384021075," //
            + "0.216186344778126+I*0.11483063987764812,0.23169360648083348,0.216186344778126+I*(-0.11483063987764812)," //
            + "0.1571184464999862+I*(-0.24103981384021075),0.0160995085282936+I*(-0.3726593373594341),-0.26626152971283157+I*(-0.45548648549281234)}," //
            + "{-0.21938625498142753+I*0.1753859114081094,-0.04980102241778393+I*0.19961798336614792,0.06045830837183815+I*0.1518895658771814," //
            + "0.11791053318992208+I*0.07897644336959968,0.1352924163128814,0.11791053318992208+I*(-0.07897644336959968)," //
            + "0.06045830837183815+I*(-0.1518895658771814),-0.04980102241778393+I*(-0.19961798336614792),-0.21938625498142753+I*(-0.1753859114081094)}," //
            + "{-0.13091794569465862+I*0.04635854758704819,-0.05043059157433899+I*0.09163920284755143,0.0170489200545795+I*0.08326920467824044," //
            + "0.05821728389747626+I*0.0470877960039403,0.07174949700810541,0.05821728389747626+I*(-0.0470877960039403)," //
            + "0.0170489200545795+I*(-0.08326920467824044),-0.05043059157433899+I*(-0.09163920284755143),-0.13091794569465862+I*(-0.04635854758704819)}," //
            + "{-0.06395922827425829+I*0.00212067870262243,-0.03319654670091112+I*0.03642688062744132,0.00169776685726545+I*0.04071801705322398," //
            + "0.02628510531089687+I*0.02504369530874619,0.03492413042327437,0.02628510531089687+I*(-0.02504369530874619)," //
            + "0.00169776685726545+I*(-0.04071801705322398),-0.03319654670091112+I*(-0.03642688062744132),-0.06395922827425829+I*(-0.00212067870262243)}}");
  }

  @Test
  public void testAiryAiPrime() {
    checkNumeric("N(AiryAiPrime(5/2),50)", //
        "-0.02625088103590323036489549629723250944631783813579");
    checkNumeric("N(AiryAiPrime(7/3-2/5*I),50)", //
        "-0.028917778124487504513141104922968418472028212650388+I*(-0.018811415742061357600555631896195799635668608492361)");
    checkNumeric("AiryAiPrime(0.5)", //
        "-0.22491053266468389");
    checkNumeric("AiryAiPrime(2.5)", //
        "-0.02625088103590328");
    checkNumeric("AiryAiPrime(2.5+I)", //
        "-0.00187920860963519+I*0.03102762428412439");
    checkNumeric("AiryAiPrime({1.2, 1.5, 1.8})", //
        "{-0.13278537855722617,-0.0973820128423013,-0.06852478011861092}");
    checkNumeric("AiryAiPrime(-2.0-2.0*I)", //
        "1.6487871524446456+I*6.415538518806123");
    checkNumeric("Table(AiryAiPrime(x+I*y), {x,-2,2,0.5}, {y,-2 ,2,0.5})", //
        "{{1.6487871524446456+I*6.415538518806123,1.6878596822355925+I*2.4806208072054083,1.1349598127621305+I*0.8858793656453342,0.7458883289066515+I*0.27431948858168653,0.618259020741691,0.7458883289066515+I*(-0.27431948858168653),1.1349598127621305+I*(-0.8858793656453342),1.6878596822355925+I*(-2.4806208072054083),1.6487871524446456+I*(-6.415538518806123)},{-2.3030550440722424+I*3.8774173107220395,-0.3345378893766945+I*2.095682670415176,0.20512029484999575+I*0.9922668479364634,0.30343326708541907+I*0.3834721333013195,0.3091869672024104,0.30343326708541907+I*(-0.3834721333013195),0.20512029484999575+I*(-0.9922668479364634),-0.3345378893766945+I*(-2.095682670415176),-2.3030550440722424+I*(-3.8774173107220395)},{-2.8676537857073603+I*0.8724917728615671,-1.1461231789596997+I*0.9327396090334683,-0.3790604792268335+I*0.6045001308622461,-0.08408287429425183+I*0.2780574347535299,-0.01016056711664521,-0.08408287429425183+I*(-0.2780574347535299),-0.3790604792268335+I*(-0.6045001308622461),-1.1461231789596997+I*(-0.9327396090334683),-2.8676537857073603+I*(-0.8724917728615671)},{-1.811457463315382+I*(-0.732706185063204),-1.0381897157458941+I*0.0149857422258546,-0.5329651964544924+I*0.16777317009366138,-0.2788911652372878+I*0.11225566397655384,-0.20408167033954736,-0.2788911652372878+I*(-0.11225566397655384),-0.5329651964544924+I*(-0.16777317009366138),-1.0381897157458941+I*(-0.0149857422258546),-1.811457463315382+I*0.732706185063204},{-0.6778858159258347+I*(-1.0346546678889406),-0.6110271969857893+I*(-0.37863048108929087),-0.432492659841807+I*(-0.09804785622924322),-0.30314078016520546+I*(-0.01115385005497297),-0.2588194037928068,-0.30314078016520546+I*0.01115385005497297,-0.432492659841807+I*0.09804785622924322,-0.6110271969857893+I*0.37863048108929087,-0.6778858159258347+I*1.0346546678889406},{-0.03674926477766765+I*(-0.7457372872160632),-0.2451099200503726+I*(-0.40188530591715615),-0.26510577281460046+I*(-0.18295697728822785),-0.2387168090817686+I*(-0.06615704122109355),-0.2249105326646839,-0.2387168090817686+I*0.06615704122109355,-0.26510577281460046+I*0.18295697728822785,-0.2451099200503726+I*0.40188530591715615,-0.03674926477766765+I*0.7457372872160632},{0.1704449781789148+I*(-0.38762243941329505),-0.04512302735081415+I*(-0.2812572342962744),-0.1306279534996475+I*(-0.16306759644932392),-0.1551593916744975+I*(-0.07138312043218831),-0.1591474412967932,-0.1551593916744975+I*0.07138312043218831,-0.1306279534996475+I*0.16306759644932392,-0.04512302735081415+I*0.2812572342962744,0.1704449781789148+I*0.38762243941329505},{0.1641490955452542+I*(-0.15233207018896208),0.02699428387462873+I*(-0.15595954460697653),-0.05167696117033663+I*(-0.11014338866453188),-0.08754456378052171+I*(-0.05441486420112598),-0.0973820128423013,-0.08754456378052171+I*0.05441486420112598,-0.05167696117033663+I*0.11014338866453188,0.02699428387462873+I*0.15595954460697653,0.1641490955452542+I*0.15233207018896208},{0.10223125956387928+I*(-0.04122584003432774),0.03589425195019047+I*(-0.07249651606383493),-0.01511027928322696+I*(-0.06245895471360014),-0.04401537826205696+I*(-0.03416918110308041),-0.05309038443365361,-0.04401537826205696+I*0.03416918110308041,-0.01511027928322696+I*0.06245895471360014,0.03589425195019047+I*0.07249651606383493,0.10223125956387928+I*0.04122584003432774}}");
  }

  @Test
  public void testAiryBi() {
    checkNumeric("N(AiryBi(2),50)", //
        "3.2980949999782147102806044252234524220039759634035");
    checkNumeric("N(AiryBi(7/3-2/5*I),50)", //
        "4.2040796385460579391040264449272350088535559144026+I*(-2.6143893634206276469827729962237112678064082878901)");
    checkNumeric("AiryBi(1.8)", //
        "2.5958693567439062");
    checkNumeric("AiryBi(2.0)", //
        "3.2980949999782146");
    checkNumeric("AiryBi(2.5+I)", //
        "0.5125437840170126+I*5.334995579271627");

    checkNumeric("AiryBi(-2.0-2.0*I)", //
        "-2.3957473642273075+I*(-3.398597652739943)");
    checkNumeric("AiryBi({1.2, 1.5, 1.8})", //
        "{1.421133675610348,1.8789415037478949,2.5958693567439062}");

    checkNumeric("Table(AiryBi(x+I*y), {x,-2,2,0.5}, {y,-2 ,2,0.5})", //
        "{{-2.3957473642273075+I*(-3.398597652739943),-1.5215235174057462+I*(-1.2926640316339846),-0.8669433867252541+I*(-0.48009810364065153),-0.5181812413053978+I*(-0.16077529192850534),-0.41230258795639846,-0.5181812413053978+I*0.16077529192850534,-0.8669433867252541+I*0.48009810364065153,-1.5215235174057462+I*1.2926640316339846,-2.3957473642273075+I*3.398597652739943},{0.2931467237726671+I*(-3.069446130475142),-0.2752096028849744+I*(-1.5640132276147374),-0.2994124789231037+I*(-0.7493316436257118),-0.22584876813039773+I*(-0.3010108561545395),-0.19178486115704124,-0.22584876813039773+I*0.3010108561545395,-0.2994124789231037+I*0.7493316436257118,-0.2752096028849744+I*1.5640132276147374,0.2931467237726671+I*3.069446130475142},{1.470664049922231+I*(-1.680152836300583),0.5460441211746294+I*(-1.149991696532466),0.21429040153487355+I*(-0.6739169237227052),0.12042394515743984+I*(-0.30639842195334394),0.1039973894969446,0.12042394515743984+I*0.30639842195334394,0.21429040153487355+I*0.6739169237227052,0.5460441211746294+I*1.149991696532466,1.470664049922231+I*1.680152836300583},{1.4644238527609936+I*(-0.5221254139942109),0.8253017961184056+I*(-0.6270187094804667),0.5215176250725336+I*(-0.4782484662833215),0.40700797160845703+I*(-0.2501387359622305),0.38035265975105387,0.40700797160845703+I*0.2501387359622305,0.5215176250725336+I*0.4782484662833215,0.8253017961184056+I*0.6270187094804667,1.4644238527609936+I*0.5221254139942109},{0.9853719221586963+I*0.01242055530982514,0.7646118577873012+I*(-0.3131746730618384),0.6488582083303949+I*(-0.3449586347680484),0.6172080740295223+I*(-0.21132635103715733),0.6149266274460007,0.6172080740295223+I*0.21132635103715733,0.6488582083303949+I*0.3449586347680484,0.7646118577873012+I*0.3131746730618384,0.9853719221586963+I*(-0.01242055530982514)},{0.48131792917659666+I*0.06009303522558785,0.5746740551712626+I*(-0.27862590346396093),0.6881452731134824+I*(-0.37081539073701086),0.8041665904962326+I*(-0.24928528888317908),0.8542770431031556,0.8041665904962326+I*0.24928528888317908,0.6881452731134824+I*0.37081539073701086,0.5746740551712626+I*0.27862590346396093,0.48131792917659666+I*(-0.06009303522558785)},{0.04882203245306119+I*(-0.13327405799174843),0.33937890746257143+I*(-0.49783178172486225),0.7166580733827684+I*(-0.6198892904008447),1.0642484093060358+I*(-0.42310591658329705),1.2074235949528713,1.0642484093060358+I*0.42310591658329705,0.7166580733827684+I*0.6198892904008447,0.33937890746257143+I*0.49783178172486225,0.04882203245306119+I*0.13327405799174843},{-0.45105814237785186+I*(-0.38809414209691334),-0.01379123033946499+I*(-0.9778818927217168),0.7635143010350922+I*(-1.2190757998193475),1.5468176062000738+I*(-0.8489619949876452),1.8789415037478951,1.5468176062000738+I*0.8489619949876452,0.7635143010350922+I*1.2190757998193475,-0.01379123033946499+I*0.9778818927217168,-0.45105814237785186+I*0.38809414209691334},{-1.3357392070661755+I*(-0.5495070069716563),-0.7729973894532738+I*(-1.8324051934417909),0.7782303837570418+I*(-2.5050963000641024),2.527398794698943+I*(-1.8216184196428054),3.2980949999782148," //
            + "2.527398794698943+I*1.8216184196428054,0.7782303837570416+I*2.5050963000641024,-0.7729973894532738+I*1.8324051934417909,-1.3357392070661755+I*0.5495070069716563}}");
  }

  @Test
  public void testAiryBiPrime() {
    checkNumeric("N(AiryBiPrime(5/2),50)", //
        "9.4214233173343017555823088857282415621646345227563");
    checkNumeric("N(AiryBiPrime(7/3-2/5*I),50)", //
        "5.4518661084743299510432832669786565021597943899934+I*(-4.3411154905787576770350457655260005851939094028033)");
    checkNumeric("AiryBiPrime(1.8)", //
        "2.985540050846599");
    checkNumeric("AiryBiPrime(2.5)", //
        "9.4214233173343015");
    checkNumeric("AiryBiPrime(2.5+I)", //
        "-1.2050484049806622+I*8.290971678096389");
    checkNumeric("AiryBiPrime({1.2, 1.5, 1.8})", //
        "{1.2212313987048949,1.8862122548481654,2.985540050846599}");

    checkNumeric("AiryBiPrime(-2.0-2.0*I)", //
        "6.447836111463259+I*(-1.6250516910582886)");

    checkNumeric("Table(AiryBiPrime(x+I*y), {x,-2,2,0.5}, {y,-2 ,2,0.5})", //
        "{{6.447836111463259+I*(-1.6250516910582886),2.5331033365702726+I*(-1.6228386817559723),0.9678264759011976+I*(-0.9859861458879565),0.4118370995916757+I*(-0.4345556675967243),0.2787951669211695,0.4118370995916757+I*0.4345556675967243,0.9678264759011976+I*0.9859861458879565,2.5331033365702726+I*1.6228386817559723,6.447836111463259+I*1.6250516910582886},{3.932016958918724+I*2.2988299083936297,2.1987088808869877+I*0.35671916706756274,1.1717853216838945+I*(-0.12630343066849617),0.6927551526059693+I*(-0.12820906415996786),0.5579081030218973,0.6927551526059693+I*0.12820906415996786,1.1717853216838945+I*0.12630343066849617,2.1987088808869877+I*(-0.35671916706756274),3.932016958918724+I*(-2.2988299083936297)},{0.9313363238436503+I*2.816910665826078,1.0605056145042242+I*1.0950538084370467,0.8344734885227826+I*0.3465260632668285,0.6537434104306256+I*0.0796983792346929,0.5923756264227923,0.6537434104306256+I*(-0.0796983792346929),0.8344734885227826+I*(-0.3465260632668285),1.0605056145042242+I*(-1.0950538084370467),0.9313363238436503+I*(-2.816910665826078)},{-0.6983087889843017+I*1.7009731791023295,0.13487759049701248+I*0.8926125557190643,0.4076171824999173+I*0.3741488036665492,0.4882315703778216+I*0.11815505364313456,0.5059337136238471,0.4882315703778216+I*(-0.11815505364313456),0.4076171824999173+I*(-0.3741488036665492),0.13487759049701248+I*(-0.8926125557190643),-0.6983087889843017+I*(-1.7009731791023295)},{-1.0677739995872133+I*0.49787252178821023,-0.303381005003919+I*0.3452466342409965,0.135026646710819+I*0.1288373867812549,0.3713269124180393+I*0.01803794206706577,0.4482883573538264,0.3713269124180393+I*(-0.01803794206706577),0.135026646710819+I*(-0.1288373867812549),-0.303381005003919+I*(-0.3452466342409965),-1.0677739995872133+I*(-0.49787252178821023)},{-0.921360768864399+I*(-0.21979246077610504),-0.4280924981222304+I*(-0.19419343508974984),0.04877551921017308+I*(-0.2504640372798279),0.4083984976406324+I*(-0.18775170288237833),0.5445725641405923,0.4083984976406324+I*0.18775170288237833,0.04877551921017308+I*0.2504640372798279,-0.4280924981222304+I*0.19419343508974984,-0.921360768864399+I*0.21979246077610504},{-0.8572392586053618+I*(-0.49550633630956736),-0.5359726424087651+I*(-0.6827306062773317),0.075662844174966+I*(-0.7837009987854552),0.6795104251233364+I*(-0.5426642609278547),0.9324359333927756,0.6795104251233364+I*0.5426642609278547,0.075662844174966+I*0.7837009987854552,-0.5359726424087651+I*0.6827306062773317,-0.8572392586053618+I*0.49550633630956736},{-1.2446407821497947+I*(-0.47896456660499337),-0.9655916784584485+I*(-1.2738241269843176),0.09801981538105+I*(-1.7162349060639506),1.336746711566785+I*(-1.2503558060049476),1.8862122548481657,1.336746711566785+I*1.2503558060049476,0.09801981538105+I*1.7162349060639506,-0.9655916784584485+I*1.2738241269843176,-1.2446407821497947+I*0.47896456660499337},{-2.485391698246339+I*(-0.065055423128367),-2.3015638068118744+I*(-2.2323284011558417),-0.11024725075605855+I*(-3.6905551002552524),2.7705928921631884+I*(-2.8748527604587153),4.10068204993289," //
            + "2.7705928921631884+I*2.8748527604587153,-0.11024725075605855+I*3.6905551002552524,-2.3015638068118744+I*2.2323284011558417,-2.485391698246339+I*0.065055423128367}}");
  }

  @Test
  public void testBesselI() {
    check("N(BesselI(0, 1), 50)", //
        "1.2660658777520083355982446252147175376076703113549");

    check("BesselI(3/2, z)", //
        "Sqrt(2/Pi)*Sqrt(z)*(Cosh(z)/z-Sinh(z)/z^2)");

    check("BesselI(-1/2, z)", //
        "(Sqrt(2/Pi)*Cosh(z))/Sqrt(z)");
    check("BesselI(1/2, z)", //
        "(Sqrt(2/Pi)*Sinh(z))/Sqrt(z)");

    checkNumeric("BesselI(I+1, -I*Infinity)", //
        "0");
    checkNumeric("BesselI(42, I*Infinity)", //
        "0");

    checkNumeric("BesselI(0, 0)", //
        "1");
    checkNumeric("BesselI(4, 0)", //
        "0");
    checkNumeric("BesselI(-42, 0)", //
        "0");
    checkNumeric("BesselI(-42.5, 0)", //
        "ComplexInfinity");
    checkNumeric("BesselI(I, 0)", //
        "Indeterminate");

    checkNumeric("BesselI(0,1.0 )", //
        "1.2660658777520082");
    checkNumeric("BesselI(0,2.0 )", //
        "2.2795853023360673");
    checkNumeric("BesselI(3 + I, 1.5 - I)", //
        "-0.2566499289084423+I*0.04927707435297578");
    checkNumeric("BesselI({0, 1, 2}, 1.)", //
        "{1.2660658777520082,0.565159103992485,0.13574766976703828}");
  }

  @Test
  public void testBesselJ() {

    check("BesselJ(3/2, x)", //
        "Sqrt(2/Pi)*Sqrt(x)*(-Cos(x)/x+Sin(x)/x^2)");
    check("BesselJ(-3/2, x)", //
        "-Sqrt(2/Pi)*Sqrt(x)*(Cos(x)/x^2+Sin(x)/x)");

    check("BesselJ(1/2,-1)", //
        "I*Sqrt(2/Pi)*Sin(1)");
    check("BesselJ(-1/2,-Infinity)", //
        "0");
    // https://github.com/mtommila/apfloat/issues/37
    checkNumeric("BesselJ(-1.9999999999998,3.0)", //
        "0.48609126058580704");
    checkNumeric("BesselJ(-1.999888,3.0)", //
        "0.48604418359704343");

    checkNumeric("BesselJ(0,0.001)", //
        "0.9999997500000157");
    checkNumeric("BesselJ(0,5.2)", //
        "-0.11029043979098654");
    checkNumeric("BesselJ(0,4.0)", //
        "-0.39714980986384735");
    checkNumeric("BesselJ(1,3.6 )", //
        "0.0954655471778764");
    checkNumeric("BesselJ(7/3 + I, 4.5 - I)", //
        "1.189083603364091+I*0.7156530815957028");
    //
    check("BesselJ(-42, z)", //
        "BesselJ(42,z)");
    check("BesselJ(-43, z)", //
        "-BesselJ(43,z)");
    // check("BesselJ(0.5, z)", //
    // "(Sqrt(2)*Sin(z))/(Sqrt(Pi)*Sqrt(z))");
    check("BesselJ(-0.5, 1.2)", //
        "0.263929");
    check("BesselJ(-0.5, 17)", //
        "-0.0532484");
    // check("BesselJ(-0.5, z)", //
    // "(Sqrt(2)*Sin(1.5708+z))/(Sqrt(Pi)*Sqrt(z))");
    check("BesselJ(1/2, z)", //
        "(Sqrt(2/Pi)*Sin(z))/Sqrt(z)");
    check("BesselJ(-1/2, z)", //
        "(Sqrt(2/Pi)*Cos(z))/Sqrt(z)");
    check("BesselJ(-2.5, 1.333)", //
        "1.6236");
    check("BesselJ(-2.5, z)", //
        "(Sqrt(2/Pi)*(-z)^2.0*(((2*Cos(z))/z^3-Cos(z)/z+(2*Sin(z))/z^2)/z+(Cos(z)/z^2+Sin(z)/z)/z^\n"
            + "2))/Sqrt(z)");
    check("BesselJ(-5/2, z)", //
        "Sqrt(2/Pi)*z^(3/2)*(((2*Cos(z))/z^3-Cos(z)/z+(2*Sin(z))/z^2)/z+(Cos(z)/z^2+Sin(z)/z)/z^\n"
            + "2)");
    check("BesselJ(0, 5.2)", "-0.11029");
    checkNumeric("BesselJ(3.5, 1.2)", //
        "0.013270419445925403");
    check("BesselJ(4.0, 0.0)", //
        "0.0");
    check("BesselJ(1.0, -3.0)", //
        "-0.339059");
    check("BesselJ(0.0, 0.0)", //
        "1.0");
    check("BesselJ(-3.0, 0.0)", //
        "0.0");
    check("BesselJ(-3, 0)", //
        "0");
    check("BesselJ(0, 0)", //
        "1");
    check("BesselJ(4, 0)", //
        "0");
    check("BesselJ(0.0, 4)", //
        "-0.39715");
    check("BesselJ(1, {0.5, 1.0, 1.5})", //
        "{0.242268,0.440051,0.557937}");
  }

  @Test
  public void testBesselJZero() {
    checkNumeric("BesselJZero(1.5, 1.0)", //
        "4.493409429988828");

    checkNumeric("BesselJZero(1.3, 3)", //
        "10.613804865461777");
    checkNumeric("BesselJZero(0.0,1)", //
        "2.4048258314347084");
    checkNumeric("BesselJZero(0.0,2)", //
        "5.520078275367197");
    checkNumeric("BesselJZero(1.0,5)", //
        "16.470629879496084");
    checkNumeric("BesselJZero(0, {1, 2, 3}) // N", //
        "{2.4048258314347084,5.520078275367197,8.653728211806023}");
    checkNumeric("BesselJZero(1, 1)/Pi // N", //
        "1.2196698060629994");

    checkNumeric("Table(BesselJZero(x,1), {x,-2,2,0.25})", //
        "{5.135622011324211,2.128941679966946,2.798386125853118,3.3441822516097046,3.8317057025328065,1.058507887548149," //
            + "1.5707967013019248,2.006299462916374,2.4048258314347084,2.7808878554491905,3.141593028096821,3.491008184755069," //
            + "3.8317057025328065,4.165425980713131,4.493409429988828,4.816574141184002,5.135622011324211}");
  }

  @Test
  public void testBesselK() {
    check("BesselK(3/2, x)", //
        "Sqrt(Pi/2)*(1/(E^x*x^2)+1/(E^x*x))*Sqrt(x)");
    check("BesselK(-3/2, x)", //
        "Sqrt(Pi/2)*(1/(E^x*x^2)+1/(E^x*x))*Sqrt(x)");
    check("BesselK(1317624576693539401,3.0-2*I)", //
        "BesselK(1.31762*10^18,3.0+I*(-2.0))");
    check("BesselK(1/2, z)", //
        "Sqrt(Pi/2)/(E^z*Sqrt(z))");
    check("BesselK(-1/2, z)", //
        "Sqrt(Pi/2)/(E^z*Sqrt(z))");

    checkNumeric("BesselK(I+1, -I*Infinity)", //
        "0");
    checkNumeric("BesselK(42, I*Infinity)", //
        "0");

    checkNumeric("BesselK(0, 0)", //
        "Infinity");
    checkNumeric("BesselK(4, 0)", //
        "ComplexInfinity");
    checkNumeric("BesselK(I, 0)", //
        "Indeterminate");

    checkNumeric("BesselK(0,0.53)", //
        "0.8765603804164857");
    checkNumeric("BesselK(0,4.0)", //
        "0.01115967608585302");
    checkNumeric("BesselK(1 + I, 3.0 - 2* I)", //
        "-0.0225107551369776+I*0.01696073734722752");
    checkNumeric("BesselK(23, 1.0)", //
        "4.661145573743599E27");
    checkNumeric("BesselK({1, 2, 3}, 1.0)", //
        "{0.6019072301972349,1.6248388986351774,7.101262824737945}");
  }

  @Test
  public void testBesselY() {
    check("BesselY(3.5,-5)", //
        "I*(-0.0275521)");
    checkNumeric("BesselY(2.5,-5.0)", //
        "I*(-0.2943723749617925)");
    checkNumeric("BesselY(I+1, -Infinity)", //
        "0");
    checkNumeric("BesselY(42, Infinity)", //
        "0");

    check("BesselY(-5/2, z)", //
        "(Sqrt(2/Pi)*((-3*Cos(z))/z-Sin(z)+(3*Sin(z))/z^2))/Sqrt(z)");
    check("BesselY(5/2, z)", //
        "(Sqrt(2/Pi)*(Cos(z)+(-3*Cos(z))/z^2+(-3*Sin(z))/z))/Sqrt(z)");
    check("BesselY(-3/2, z)", //
        "(Sqrt(2/Pi)*(Cos(z)-Sin(z)/z))/Sqrt(z)");
    check("BesselY(3/2, z)", //
        "(Sqrt(2/Pi)*(-Cos(z)/z-Sin(z)))/Sqrt(z)");
    check("BesselY(-1/2, z)", //
        "(Sqrt(2/Pi)*Sin(z))/Sqrt(z)");
    check("BesselY(1/2, z)", //
        "(-Sqrt(2/Pi)*Cos(z))/Sqrt(z)");
    checkNumeric("BesselY(0, 0)", //
        "-Infinity");
    checkNumeric("BesselY(4, 0)", //
        "ComplexInfinity");
    checkNumeric("BesselY(I, 0)", //
        "Indeterminate");

    checkNumeric("BesselY(10.0,1.0)", //
        "-1.216180142786892E8");
    checkNumeric("BesselY(0,2.5)", //
        "0.49807035961523183");
    checkNumeric("BesselY(0,1.0)", //
        "0.08825696421567694");
    checkNumeric("BesselY(0.5*I, 3.0 - I)", //
        "1.0468646059974471+I*0.8847844476974699");
    checkNumeric("BesselY(0, {1.0, 2.0, 3.0})", //
        "{0.08825696421567694,0.510375672649745,0.3768500100127904}");
  }

  @Test
  public void testBesselYZero() {
    // https://github.com/paulmasson/math/issues/11
    checkNumeric("BesselYZero(0.0,1)", //
        "0.8935771552464262");

    checkNumeric("BesselYZero(1.3, 3)", //
        "9.031260842335175");
    checkNumeric("BesselYZero(0.0,2)", //
        "3.957678435648244");

    checkNumeric("Table(BesselYZero(x,1), {x,-2,2,0.25})", //
        "{3.3842419063910434,3.971831811344723,4.493409218807862,1.597155616577941,2.197141057759451,"//
            + "2.6938504302755852,3.141593028096821,0.5089486250933928,0.8935771552464262,1.241662317881476,"//
            + "1.5707962332014729,1.888077462109278,2.197141057759451,2.500121683376498,2.79838644140362,"//
            + "3.0928694051018533,3.3842419063910434}");

  }

  @Test
  public void testHankelH1() {
    check("HankelH1(1317624576693539401,I*1/2)", //
        "HankelH1(1317624576693539401,I*1/2)");
    check("HankelH1(#2,#2)", //
        "HankelH1(#2,#2)");
    checkNumeric("HankelH1(2.0,3)", //
        "0.486091260585958+I*(-0.16040039348491514)");
    checkNumeric("HankelH1(3,1.2)", //
        "0.03287433692500416+I*(-3.5898996296131624)");
    checkNumeric("HankelH1(4.0,Pi)", //
        "0.15142457763119113+I*(-0.8284254758009458)");
    checkNumeric("HankelH1(23/47,5.0-I)", //
        "-0.8840126453738697+I*(-0.37582703842509113)");
  }

  @Test
  public void testHankelH2() {
    checkNumeric("HankelH2(3,1.2)", //
        "0.03287433692500416+I*3.5898996296131624");
    checkNumeric("HankelH2(0.2,3)", //
        "-0.1337869677248155+I*(-0.4383481561883242)");
    checkNumeric("HankelH2(4.0,3*Pi)", //
        "-0.27212624415123904+I*0.015631826514063165");
    checkNumeric("HankelH2(23/47,5.0-I)", //
        "-0.1272388528903588+I*0.02641083531092656");
  }


  @Test
  public void testSphericalHankelH1() {
    check("SphericalHankelH1(a,b)", //
        "SphericalHankelH1(a,b)");

    check("SphericalHankelH1(3, 1.5)", //
        "0.0283246+I*(-3.78927)");
    check("SphericalHankelH1(2, -5.0)", //
        "0.134731+I*(-0.164995)");
    check("SphericalHankelH1(-0.5, 1.0)", //
        "0.959033+I*0.110614");

    check("SphericalHankelH1(2 + I, 5.0 + I)", //
        "0.192197+I*0.15964");
  }

  @Test
  public void testSphericalHankelH2() {
    check("SphericalHankelH2(3, 1.5)", //
        "0.0283246+I*3.78927");
    check("SphericalHankelH2(2, -5.0)", //
        "0.134731+I*0.164995");
    check("SphericalHankelH2(-0.5, 1.0)", //
        "0.959033+I*(-0.110614)");

    check("SphericalHankelH2(1 + I, 5.0 + I)", //
        "-0.084523+I*(-0.120937)");
  }

  @Test
  public void testWeberE() {
    check("WeberE(1.5, 3.5)", //
        "0.212207*HypergeometricPFQ({1},{0.25,1.75},-3.0625)+0.891268*HypergeometricPFQ({\n"
            + "1},{0.75,2.25},-3.0625)");
  }
}
